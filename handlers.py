from datetime import datetime, time, timedelta
from aiogram import Bot, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
import keyboard as kb
import sqlite3
import asyncio
import re
import bcrypt


def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

def check_password(password: str, hashed_password: str) -> bool:
    return bcrypt.checkpw(password.encode(), hashed_password.encode())

router = Router()


class Register(StatesGroup):
    name = State()
    birth = State()
    phone = State()
    email = State()
    password = State()


class TransactionStates(StatesGroup):
    AMOUNT = State()


class GoalStates(StatesGroup):
    AMOUNT = State()


class SettingsStates(StatesGroup):
    CHOOSE_OPTION = State()
    UPDATE_USER_DATA = State()
    UPDATE_GOAL = State()


def get_settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")],
            [KeyboardButton(text="üìä –í—Å–µ —Ç—Ä–∞—Ç—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )


async def init_db():
    try:
        await execute_sql("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                birth_date TEXT,
                phone TEXT,
                email TEXT UNIQUE,
                password_hash TEXT NOT NULL,
                registered_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)

        await execute_sql("""
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                category TEXT NOT NULL,
                type TEXT CHECK(type IN ('–¥–æ—Ö–æ–¥', '—Ä–∞—Å—Ö–æ–¥')),
                date TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        """)

        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False


async def execute_sql(query, params=()):
    conn = sqlite3.connect('budget.db')
    cursor = conn.cursor()
    try:
        cursor.execute(query, params)
        conn.commit()
        return True
    except sqlite3.Error as e:
        print(f"SQL error: {e}")
        return False
    finally:
        conn.close()


async def fetch_sql(query, params=()):
    conn = sqlite3.connect('budget.db')
    cursor = conn.cursor()
    try:
        cursor.execute(query, params)
        return cursor.fetchall()
    except sqlite3.Error as e:
        print(f"SQL error: {e}")
        return None
    finally:
        conn.close()


def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


async def reset_state(state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()


async def check_auth(message: Message, state: FSMContext) -> bool:
    user = await fetch_sql("SELECT password_hash FROM users WHERE user_id = ?", (message.from_user.id,))
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return False

    auth_data = await state.get_data()
    if auth_data.get("authenticated"):
        return True

    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:", reply_markup=kb.remove_keyboard)
    await state.set_state("waiting_for_password")
    return False

@router.message(F.state == "waiting_for_password")
async def handle_password_input(message: Message, state: FSMContext):
    user = await fetch_sql("SELECT password_hash FROM users WHERE user_id = ?", (message.from_user.id,))
    if not user:
        await state.clear()
        return

    if check_password(message.text, user[0][0]):
        await state.update_data(authenticated=True)
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!", reply_markup=kb.main)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await reset_state(state)
    await message.answer(
        'üí∞ –ü—Ä–∏–≤–µ—Ç! –Ø –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –î–∂–∏–Ω - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ—Ç—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ /register',
        reply_markup=kb.main
    )


@router.message(Command('register'))
async def start_registration(message: Message, state: FSMContext):
    await reset_state(state)
    await state.set_state(Register.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=kb.remove_keyboard)


@router.message(Register.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.birth)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")


@router.message(Register.birth)
async def process_birth(message: Message, state: FSMContext):
    await state.update_data(birth=message.text)
    await state.set_state(Register.phone)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb.get_number)


@router.message(Register.phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await state.set_state(Register.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email. –ü—Ä–∏–º–µ—Ä example@mail.ru:", reply_markup=kb.remove_keyboard)

@router.message(Register.email)
async def process_email(message: Message, state: FSMContext):
    if not is_valid_email(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    data = await state.get_data()
    await message.answer("üîê –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
    await state.update_data(email=message.text)
    await state.set_state(Register.password)  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞—Ä–æ–ª—è

    
@router.message(Register.password)
async def process_password(message: Message, state: FSMContext):
    try:
        await message.delete()
    except:
        pass   
        
    password = message.text.strip()
    if len(password) < 4:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        await asyncio.sleep(5)
        try:
            await error_msg.delete()
        except:
            pass
        return

    data = await state.get_data()
    hashed_password = hash_password(password)
    
    try:
        await init_db()

        columns = await fetch_sql("PRAGMA table_info(users)")
        if not any(col[1] == 'password_hash' for col in columns):
            await execute_sql("ALTER TABLE users ADD COLUMN password_hash TEXT NOT NULL DEFAULT ''")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await execute_sql(
            "INSERT INTO users (user_id, name, birth_date, phone, email, password_hash) VALUES (?, ?, ?, ?, ?, ?)",
            (message.from_user.id, data['name'], data['birth'], data['phone'], data['email'], hashed_password)
        )

        if success:
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ –≤–≤–æ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n"
                f"üë§ {data['name']}\n"
                f"üéÇ {data['birth']}\n"
                f"üì± {data['phone']}\n"
                f"üìß {data['email']}",
                reply_markup=kb.main
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb.main)

    except sqlite3.Error as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup=kb.main)
        print(f"Database error: {e}")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", reply_markup=kb.main)
        print(f"Unexpected error: {e}")
    finally:
        await state.clear()
        

@router.message(F.text == '–í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—ã')
async def add_expense(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return

@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings_menu(message: Message, state: FSMContext):
    await reset_state(state)
    await state.set_state(SettingsStates.CHOOSE_OPTION)
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard())


@router.message(SettingsStates.CHOOSE_OPTION, F.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def update_user_data(message: Message, state: FSMContext):
    await state.set_state(SettingsStates.UPDATE_USER_DATA)
    user_data = await fetch_sql(
        "SELECT name, birth_date, email FROM users WHERE user_id = ?",
        (message.from_user.id,)
    )

    if user_data:
        name, birth, email = user_data[0]
        await message.answer(
            f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n{name}, {birth}, {email}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–§–ò–û, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, Email\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, 01.01.1990, ivan@mail.ru",
            reply_markup=kb.remove_keyboard
        )
    else:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=get_settings_keyboard())
        await state.clear()


@router.message(SettingsStates.UPDATE_USER_DATA)
async def process_update_data(message: Message, state: FSMContext):
    try:
        parts = [p.strip() for p in message.text.split(',')]
        if len(parts) != 3:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

        name, birth, email = parts
        if not is_valid_email(email):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")

        success = await execute_sql(
            "UPDATE users SET name = ?, birth_date = ?, email = ? WHERE user_id = ?",
            (name, birth, email, message.from_user.id)
        )

        if success:
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=kb.main)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.main)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_settings_keyboard())
    finally:
        await state.clear()


@router.message(SettingsStates.CHOOSE_OPTION, F.text == "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")
async def update_goal(message: Message, state: FSMContext):
    await state.set_state(SettingsStates.UPDATE_GOAL)
    goal = await fetch_sql(
        "SELECT target_amount FROM goals WHERE user_id = ?",
        (message.from_user.id,)
    )

    if goal:
        await message.answer(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {goal[0][0]} —Ä—É–±.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ü–µ–ª–∏:",
            reply_markup=kb.remove_keyboard
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–µ–ª–∏:", reply_markup=kb.remove_keyboard)


@router.message(SettingsStates.UPDATE_GOAL)
async def process_update_goal(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        daily = amount / 200
        success = await execute_sql(
            "INSERT OR REPLACE INTO goals (user_id, target_amount, daily_amount) VALUES (?, ?, ?)",
            (message.from_user.id, amount, daily)
        )

        if success:
            await message.answer(
                f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {daily:.2f} —Ä—É–±.",
                reply_markup=kb.main
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=kb.main)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)", reply_markup=get_settings_keyboard())
    finally:
        await state.clear()


@router.message(SettingsStates.CHOOSE_OPTION, F.text == "üìä –í—Å–µ —Ç—Ä–∞—Ç—ã")
async def show_expenses(message: Message):
    expenses = await fetch_sql(
        "SELECT amount, category, date FROM transactions "
        "WHERE user_id = ? AND type = '—Ä–∞—Å—Ö–æ–¥' "
        "ORDER BY date DESC LIMIT 50",
        (message.from_user.id,)
    )

    if not expenses:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö", reply_markup=get_settings_keyboard())
        return

    total = sum(e[0] for e in expenses)
    report = ["üìÖ –í–∞—à–∏ —Ç—Ä–∞—Ç—ã:", ""]

    for amount, category, date in expenses:
        report.append(f"{date}: {amount} —Ä—É–±. - {category}")

    report.extend(["", f"üíµ –í—Å–µ–≥–æ: {total} —Ä—É–±."])

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 10 —Ç—Ä–∞—Ç, –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
    for i in range(0, len(report), 10):
        await message.answer("\n".join(report[i:i + 10]), reply_markup=get_settings_keyboard())


@router.message(SettingsStates.CHOOSE_OPTION, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)


@router.message(F.text == '–í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—ã')
async def add_expense(message: Message, state: FSMContext):
    await reset_state(state)
    await state.set_state(TransactionStates.AMOUNT)
    await message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –ø—Ä–æ–¥—É–∫—Ç—ã). –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ï–¥–∞, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ñ–∏–ª—å—ë, –£—á—ë–±–∞, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –ú–µ–¥–∏—Ü–∏–Ω–∞, –î—Ä—É–≥–æ–µ(–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é)",
        reply_markup=kb.remove_keyboard
    )


@router.message(TransactionStates.AMOUNT)
async def process_expense(message: Message, state: FSMContext):
    if message.text in ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—ã', '–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å']:
        await state.clear()
        return

    try:
        parts = message.text.strip().split(maxsplit=1)
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

        amount = float(parts[0])
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        category = parts[1].strip()
        if not category:
            raise ValueError("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")

        success = await execute_sql(
            "INSERT INTO transactions (user_id, amount, category, type, date) VALUES (?, ?, ?, ?, ?)",
            (message.from_user.id, amount, category, "—Ä–∞—Å—Ö–æ–¥", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )

        if success:
            await message.answer(
                f"‚úÖ –¢—Ä–∞—Ç–∞ {amount} —Ä—É–±. –Ω–∞ '{category}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=kb.main
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=kb.main)
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}\n–ü—Ä–∏–º–µ—Ä: 500 –ø—Ä–æ–¥—É–∫—Ç—ã", reply_markup=kb.main)
    finally:
        await state.clear()


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å')
async def add_goal(message: Message, state: FSMContext):
    await reset_state(state)
    await state.set_state(GoalStates.AMOUNT)
    await message.answer(
        "üéØ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–µ–ª–∏:",
        reply_markup=kb.remove_keyboard
    )


@router.message(GoalStates.AMOUNT)
async def process_goal(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        daily = amount / 200
        success = await execute_sql(
            "INSERT OR REPLACE INTO goals (user_id, target_amount, daily_amount) VALUES (?, ?, ?)",
            (message.from_user.id, amount, daily)
        )

        if success:
            asyncio.create_task(send_daily_reminder(message.from_user.id, amount, daily))
            await message.answer(
                f"‚úÖ –¶–µ–ª—å {amount} —Ä—É–±. —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {daily:.2f} —Ä—É–±.\n"
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 19:00",
                reply_markup=kb.main
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=kb.main)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000)", reply_markup=kb.main)
    finally:
        await state.clear()


async def send_daily_reminder(user_id: int, goal: float, daily: float):
    bot = Bot.get_current()
    while True:
        now = datetime.now()
        target = datetime.combine(now.date(), time(19, 0))

        if now > target:
            target += timedelta(days=1)

        await asyncio.sleep((target - now).total_seconds())

        try:
            await bot.send_message(
                user_id,
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                f"–°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å {daily:.2f} —Ä—É–±.\n"
                f"–¶–µ–ª—å: {goal} —Ä—É–±.",
                reply_markup=kb.main
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

        await asyncio.sleep(86400)  # –ñ–¥–µ–º 24 —á–∞—Å–∞

@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_statistics(message: Message):
    now = datetime.now()
    current_month = now.strftime("%Y-%m")
    last_month = (now.replace(day=1) - timedelta(days=1)).strftime("%Y-%m")
    three_months_ago = (now - timedelta(days=90)).strftime("%Y-%m-%d")
    six_months_ago = (now - timedelta(days=180)).strftime("%Y-%m-%d")
    current_date = now.strftime("%Y-%m-%d")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    categories = await fetch_sql(
        "SELECT category, SUM(amount) FROM transactions "
        "WHERE user_id = ? AND type = '—Ä–∞—Å—Ö–æ–¥' AND strftime('%Y-%m', date) = ? "
        "GROUP BY category ORDER BY SUM(amount) DESC",
        (message.from_user.id, current_month)
    )

    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—ÉAdd commentMore actions
    if categories:
        try:
            labels = [cat[0] for cat in categories]
            sizes = [float(cat[1]) for cat in categories]
            total = sum(sizes)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
            fig, ax = plt.subplots(figsize=(8, 6))
            ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
            ax.axis('equal') 
            plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {current_month}\n–í—Å–µ–≥–æ: {total:.2f} —Ä—É–±.')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            buf = BytesIO()
            plt.savefig(buf, format='png', dpi=80, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig) 

            photo = BufferedInputFile(buf.getvalue(), filename='graph.png')
            
            await message.answer_photo(
                photo=photo,
                caption="üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
            )
            buf.close() 
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤")

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    response = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n"]

    if categories:
        response.append("\n<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</b>")
        for category, amount in categories:
            response.append(f"‚ñ™Ô∏è {category}: {amount:.2f} —Ä—É–±.")
    else:
        response.append("\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.")

    # –û–±—â–∏–µ —Å—É–º–º—ã –∑–∞ –ø–µ—Ä–∏–æ–¥—ã
    periods = [
        ("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", 
         "strftime('%Y-%m', date) = ?", 
         [current_month]),
        
        ("–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", 
         "strftime('%Y-%m', date) = ?", 
         [last_month]),
        
        ("3 –º–µ—Å—è—Ü–∞", 
         "date BETWEEN ? AND ?", 
         [three_months_ago, current_date]),
        
        ("6 –º–µ—Å—è—Ü–µ–≤", 
         "date BETWEEN ? AND ?", 
         [six_months_ago, current_date])
    ]

    response = ["<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n"]

    if categories:
        response.append("\n<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</b>")
        for category, amount in categories:
            response.append(f"‚ñ™Ô∏è {category}: {amount:.2f} —Ä—É–±.")
    else:
        response.append("\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.")

    response.append("\n<b>–û–±—â–∏–µ —Å—É–º–º—ã:</b>")
    for period_name, condition, params in periods:
        total = await fetch_sql(
            f"SELECT SUM(amount) FROM transactions "
            f"WHERE user_id = ? AND type = '—Ä–∞—Å—Ö–æ–¥' AND {condition}",
            (message.from_user.id, *params)
        )
        
        amount = total[0][0] if total and total[0][0] is not None else 0
        response.append(f"{period_name}: {amount:.2f} —Ä—É–±.")

    await message.answer(
        "\n".join(response),
        reply_markup=kb.main,
        parse_mode=ParseMode.HTML  
    )